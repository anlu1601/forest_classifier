# -*- coding: utf-8 -*-
"""label-images_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9YZdZOyOMMiHka3f5vq6_ABgXJCNeA2
"""

# Read prediction_list.csv, return list
# prediction_names_file
def readCSV2List(prediction_names_file):
  filePath = prediction_names_file
  try:
    file = open(filePath,'r', encoding="gbk")
    context = file.read()
    list_result = context.split("\n")
    length = len(list_result)
    for i in range(length):
      list_result[i] = list_result[i].split(",")
    return list_result
  except Exception:
      print("Read failed.")

def num_input_birch(birch_file):
   # get number of images in images_labeled_input/birch for numbering images. 
    birchpath = birch_file
    read_birchpath = os.listdir(birchpath) # get image_folder path
    #num_birch = len(read_birchpath)
    num_birch = 0
    for item in read_birchpath:
      if not item.startswith('.ipy'):
        num_birch += 1
    return num_birch - 1
#print(num_input_birch(birch_file)) # check the number of birch in input-dataset

def num_input_spruce(spruce_file):
    # get number of images in images_labeled_input/spruce for numbering images. 
    sprucepath = spruce_file
    read_sprucepath = os.listdir(sprucepath) # get image_folder path
    #print(len(read_sprucepath)) #will include .ipynb_checkpints
    num_spruce = 0
    for item in read_sprucepath:
      if not item.startswith('.ipy'):
        num_spruce += 1
    return num_spruce - 1
#print(num_input_spruce(spruce_file)) # check the number of spruce in input-dataset

# rename these unlabeled trees with a prediction name

def rename(new_list, Num_Birch, Num_Spruce):
  # Rename all the trees in the list
  
  # initialize number of tree
  num_birch = Num_Birch
  num_spruce = Num_Spruce

  # get slashes' number and the previous level folder's filepath
  image_path = new_list[0][2]
  slashes_number = image_path.count("/")
  image_path_split_list = image_path.split('/')
  previous_image_path = ''
  for i in range(slashes_number):
    previous_image_path += image_path_split_list[i] + '/'


  for i in new_list:
    prediction_name = i[0]
    image_path = i[2]
    # Note that if the path has changed, the split method need to be changed.
    image_name = image_path.split('/')[slashes_number] # treeXXX.png
  
    image_folder = previous_image_path  # /content/drive/My Drive/CNN_lager_dataset/images_tobeclassified/unlabeled-images
    image_format = '.' + image_path.split('.')[1]  # .png

    # get a new name, different from names in dataset
    if prediction_name == 'birch':
      num_birch += 1
      new_name = prediction_name + '_' + str(num_birch) + image_format 
    elif prediction_name == 'spruce':
      num_spruce += 1
      new_name = prediction_name + '_' + str(num_spruce) + image_format

    # save the new name into the folder
    src = os.path.join(os.path.abspath(image_folder), image_name)
    dst = os.path.join(os.path.abspath(image_folder), new_name)
    os.rename(src, dst)
    #print('converting %s to %s ...'%(src, dst))

# def pine_to_birch(name):
#   # change all the pines' names into birch
#   path = "/content/drive/My Drive/cnn/dataset/pine"
#   read_path = os.listdir(path)
#   num_tree = len(read_path)
#   i = 0
#   for item in read_path:
#     if item.endswith('png'):
#       suffix = item.split("_")[1]
#       new_name = name + '_' + suffix
#       src = os.path.join(os.path.abspath(path), item)
#       dst = os.path.join(os.path.abspath(path), new_name)
#       try:
#         os.rename(src, dst)
#         i = i + 1
#       except:
#         print("Somthing wrong.")
#     print('total %d to rename & converted %d jpgs' %(num_tree, i))

# pine_to_birch("birch")

# function: move images from src_path to dst_path

def move_file(src_path, dst_path):
  print('from : ',src_path)
  print('to : ',dst_path)

  dir_folder = os.listdir(src_path)
  for file in dir_folder:
    try:
      f_src = os.path.join(src_path, file)
      if not os.path.exists(dst_path):
        os.mkdir(dst_path)
      f_dst = os.path.join(dst_path, file)
      shutil.move(f_src, f_dst)
    except Exception as e:
      print('move_file ERROR: ',e)
      traceback.print_exc()

# move_file('/content/drive/My Drive/cnn/images/1','/content/drive/My Drive/cnn/images_labeled_input/spruce')

import os
import shutil
import traceback

if __name__ == "__main__":
  prediction_names_file = "/content/drive/My Drive/CNN_lager_dataset/prediction_list_1.csv"  
  birch_file = "/content/drive/My Drive/CNN_lager_dataset/dataset/birch"
  spruce_file = "/content/drive/My Drive/CNN_lager_dataset/dataset/spruce" 


  prediction_list = readCSV2List(prediction_names_file)
  new_list = list_result[1:-1] # [[prediction, accuracy, image]..],delete list's header and the last empty line
  Num_Birch = num_input_birch(birch_file) 
  Num_Spruce = num_input_spruce(spruce_file)
  try:
      rename(new_list, Num_Birch, Num_Spruce)
  except Exception as e:
      print('Unlabed images have already been renamed!')
      #print('Unlabed images have already been renamed!',e)
      #traceback.print_exc()
  
 ## move the new labeled images to any folder(dataset..) 
 # move_file()